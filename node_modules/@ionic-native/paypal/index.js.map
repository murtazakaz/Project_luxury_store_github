{"version":3,"sources":["../../../src/@ionic-native/plugins/paypal/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\r\n\r\n/**\r\n * @name PayPal\r\n * @description\r\n * PayPal plugin for Cordova/Ionic Applications\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { PayPal, PayPalPayment, PayPalConfiguration } from '@ionic-native/paypal';\r\n *\r\n * constructor(private payPal: PayPal) { }\r\n *\r\n * ...\r\n *\r\n *\r\n * this.payPal.init({\r\n *   PayPalEnvironmentProduction: 'YOUR_PRODUCTION_CLIENT_ID',\r\n *   PayPalEnvironmentSandbox: 'YOUR_SANDBOX_CLIENT_ID'\r\n * }).then(() => {\r\n *   // Environments: PayPalEnvironmentNoNetwork, PayPalEnvironmentSandbox, PayPalEnvironmentProduction\r\n *   this.payPal.prepareToRender('PayPalEnvironmentSandbox', new PayPalConfiguration({\r\n *     // Only needed if you get an \"Internal Service Error\" after PayPal login!\r\n *     //payPalShippingAddressOption: 2 // PayPalShippingAddressOptionPayPal\r\n *   })).then(() => {\r\n *     let payment = new PayPalPayment('3.33', 'USD', 'Description', 'sale');\r\n *     this.payPal.renderSinglePaymentUI(payment).then(() => {\r\n *       // Successfully paid\r\n *\r\n *       // Example sandbox response\r\n *       //\r\n *       // {\r\n *       //   \"client\": {\r\n *       //     \"environment\": \"sandbox\",\r\n *       //     \"product_name\": \"PayPal iOS SDK\",\r\n *       //     \"paypal_sdk_version\": \"2.16.0\",\r\n *       //     \"platform\": \"iOS\"\r\n *       //   },\r\n *       //   \"response_type\": \"payment\",\r\n *       //   \"response\": {\r\n *       //     \"id\": \"PAY-1AB23456CD789012EF34GHIJ\",\r\n *       //     \"state\": \"approved\",\r\n *       //     \"create_time\": \"2016-10-03T13:33:33Z\",\r\n *       //     \"intent\": \"sale\"\r\n *       //   }\r\n *       // }\r\n *     }, () => {\r\n *       // Error or render dialog closed without being successful\r\n *     });\r\n *   }, () => {\r\n *     // Error in configuration\r\n *   });\r\n * }, () => {\r\n *   // Error in initialization, maybe PayPal isn't supported or something else\r\n * });\r\n * ```\r\n * @interfaces\r\n * PayPalEnvironment\r\n * PayPalConfigurationOptions\r\n * @classes\r\n * PayPalPayment\r\n * PayPalItem\r\n * PayPalPaymentDetails\r\n * PayPalShippingAddress\r\n */\r\n@Plugin({\r\n  pluginName: 'PayPal',\r\n  plugin: 'com.paypal.cordova.mobilesdk',\r\n  pluginRef: 'PayPalMobile',\r\n  repo: 'https://github.com/paypal/PayPal-Cordova-Plugin',\r\n  platforms: ['Android', 'iOS']\r\n})\r\n\r\nexport class PayPal extends IonicNativePlugin {\r\n  /**\r\n   * Retrieve the version of the PayPal iOS SDK library. Useful when contacting support.\r\n   * @returns {Promise<string>}\r\n   */\r\n  @Cordova()\r\n  version(): Promise<string> { return; }\r\n\r\n  /**\r\n   * You must preconnect to PayPal to prepare the device for processing payments.\r\n   * This improves the user experience, by making the presentation of the\r\n   * UI faster. The preconnect is valid for a limited time, so\r\n   * the recommended time to preconnect is on page load.\r\n   *\r\n   * @param {PayPalEnvironment} clientIdsForEnvironments: set of client ids for environments\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  init(clientIdsForEnvironments: PayPalEnvironment): Promise<any> { return; }\r\n\r\n  /**\r\n   * You must preconnect to PayPal to prepare the device for processing payments.\r\n   * This improves the user experience, by making the presentation of the UI faster.\r\n   * The preconnect is valid for a limited time, so the recommended time to preconnect is on page load.\r\n   *\r\n   * @param {String} environment: available options are \"PayPalEnvironmentNoNetwork\", \"PayPalEnvironmentProduction\" and \"PayPalEnvironmentSandbox\"\r\n   * @param {PayPalConfiguration} configuration: PayPalConfiguration object, for Future Payments merchantName, merchantPrivacyPolicyURL and merchantUserAgreementURL must be set be set\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  prepareToRender(environment: string, configuration: PayPalConfiguration): Promise<any> { return; }\r\n\r\n  /**\r\n   * Start PayPal UI to collect payment from the user.\r\n   * See https://developer.paypal.com/webapps/developer/docs/integration/mobile/ios-integration-guide/\r\n   * for more documentation of the params.\r\n   *\r\n   * @param {PayPalPayment} payment PayPalPayment object\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  renderSinglePaymentUI(payment: PayPalPayment): Promise<any> { return; }\r\n\r\n  /**\r\n   * Once a user has consented to future payments, when the user subsequently initiates a PayPal payment\r\n   * from their device to be completed by your server, PayPal uses a Correlation ID to verify that the\r\n   * payment is originating from a valid, user-consented device+application.\r\n   * This helps reduce fraud and decrease declines.\r\n   * This method MUST be called prior to initiating a pre-consented payment (a \"future payment\") from a mobile device.\r\n   * Pass the result to your server, to include in the payment request sent to PayPal.\r\n   * Do not otherwise cache or store this value.\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  clientMetadataID(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Please Read Docs on Future Payments at https://github.com/paypal/PayPal-iOS-SDK#future-payments\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  renderFuturePaymentUI(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Please Read Docs on Profile Sharing at https://github.com/paypal/PayPal-iOS-SDK#profile-sharing\r\n   *\r\n   * @param {Array<string>} scopes scopes Set of requested scope-values. Accepted scopes are: openid, profile, address, email, phone, futurepayments and paypalattributes\r\n   * See https://developer.paypal.com/docs/integration/direct/identity/attributes/ for more details\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  renderProfileSharingUI(scopes: string[]): Promise<any> { return; }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\r\nexport interface PayPalEnvironment {\r\n  PayPalEnvironmentProduction: string;\r\n  PayPalEnvironmentSandbox: string;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class PayPalPayment {\r\n  constructor(amount: string, currency: string, shortDescription: string, intent: string, details?: PayPalPaymentDetails) {\r\n    this.amount = amount;\r\n    this.currency = currency;\r\n    this.shortDescription = shortDescription;\r\n    this.intent = intent;\r\n    this.details = details;\r\n  }\r\n\r\n  /**\r\n   * The amount of the payment.\r\n   */\r\n  amount: string;\r\n  /**\r\n   * The ISO 4217 currency for the payment.\r\n   */\r\n  currency: string;\r\n  /**\r\n   * A short description of the payment.\r\n   */\r\n  shortDescription: string;\r\n  /**\r\n   * \"Sale\" for an immediate payment.\r\n   */\r\n  intent: string;\r\n  /**\r\n   * Optional Build Notation code (\"BN code\"), obtained from partnerprogram@paypal.com,\r\n   * for your tracking purposes.\r\n   */\r\n  bnCode: string = 'PhoneGap_SP';\r\n  /**\r\n   * Optional invoice number, for your tracking purposes. (up to 256 characters)\r\n   */\r\n  invoiceNumber: string;\r\n\r\n  /**\r\n   * Optional text, for your tracking purposes. (up to 256 characters)\r\n   */\r\n  custom: string;\r\n\r\n  /**\r\n   * Optional text which will appear on the customer's credit card statement. (up to 22 characters)\r\n   */\r\n  softDescriptor: string;\r\n\r\n  /**\r\n   * Optional array of PayPalItem objects.\r\n   */\r\n  items: Array<PayPalItem>;\r\n\r\n  /**\r\n  * Optional payee email, if your app is paying a third-party merchant.\r\n  * The payee's email. It must be a valid PayPal email address.\r\n  */\r\n  payeeEmail: string;\r\n\r\n  /**\r\n   * Optional customer shipping address, if your app wishes to provide this to the SDK.\r\n   */\r\n  shippingAddress: string;\r\n\r\n  /**\r\n   * Optional PayPalPaymentDetails object\r\n   */\r\n  details: PayPalPaymentDetails;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class PayPalItem {\r\n  /**\r\n   * The PayPalItem class defines an optional itemization for a payment.\r\n   * @see https://developer.paypal.com/docs/api/#item-object for more details.\r\n   * @param {String} name: Name of the item. 127 characters max\r\n   * @param {Number} quantity: Number of units. 10 characters max.\r\n   * @param {String} price: Unit price for this item 10 characters max.\r\n   * May be negative for \"coupon\" etc\r\n   * @param {String} currency: ISO standard currency code.\r\n   * @param {String} sku: The stock keeping unit for this item. 50 characters max (optional)\r\n   */\r\n  constructor(name: string, quantity: number, price: string, currency: string, sku?: string) {\r\n    this.name = name;\r\n    this.quantity = quantity;\r\n    this.price = price;\r\n    this.currency = currency;\r\n    this.sku = sku;\r\n  }\r\n  /**\r\n   * Name of the item. 127 characters max\r\n   */\r\n  name: string;\r\n  /**\r\n   * Number of units. 10 characters max.\r\n   */\r\n  quantity: number;\r\n  /**\r\n   * Unit price for this item 10 characters max.\r\n   */\r\n  price: string;\r\n  /**\r\n   * ISO standard currency code.\r\n   */\r\n  currency: string;\r\n  /**\r\n   * The stock keeping unit for this item. 50 characters max (optional)\r\n   */\r\n  sku?: string;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class PayPalPaymentDetails {\r\n  /**\r\n   * The PayPalPaymentDetails class defines optional amount details.\r\n   * @param {String} subtotal: Sub-total (amount) of items being paid for. 10 characters max with support for 2 decimal places.\r\n   * @param {String} shipping: Amount charged for shipping. 10 characters max with support for 2 decimal places.\r\n   * @param {String} tax: Amount charged for tax. 10 characters max with support for 2 decimal places.\r\n   */\r\n  constructor(subtotal: string, shipping: string, tax: string) {\r\n    this.subtotal = subtotal;\r\n    this.shipping = shipping;\r\n    this.tax = tax;\r\n  }\r\n  /**\r\n   * Sub-total (amount) of items being paid for. 10 characters max with support for 2 decimal places.\r\n   */\r\n  subtotal: string;\r\n  /**\r\n   * Amount charged for shipping. 10 characters max with support for 2 decimal places.\r\n   */\r\n  shipping: string;\r\n  /**\r\n   * Amount charged for tax. 10 characters max with support for 2 decimal places.\r\n   */\r\n  tax: string;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport interface PayPalConfigurationOptions {\r\n  /**\r\n   * Will be overridden by email used in most recent PayPal login.\r\n   */\r\n  defaultUserEmail?: string;\r\n  /**\r\n   * Will be overridden by phone country code used in most recent PayPal login\r\n   */\r\n  defaultUserPhoneCountryCode?: string;\r\n  /**\r\n   * Will be overridden by phone number used in most recent PayPal login.\r\n   */\r\n  defaultUserPhoneNumber?: string;\r\n  /**\r\n   * Your company name, as it should be displayed to the user when requesting consent via a PayPalFuturePaymentViewController.\r\n   */\r\n  merchantName?: string;\r\n  /**\r\n   * URL of your company's privacy policy, which will be offered to the user when requesting consent via a PayPalFuturePaymentViewController.\r\n   */\r\n  merchantPrivacyPolicyURL?: string;\r\n  /**\r\n   * URL of your company's user agreement, which will be offered to the user when requesting consent via a PayPalFuturePaymentViewController.\r\n   */\r\n  merchantUserAgreementURL?: string;\r\n  /**\r\n   * If set to NO, the SDK will only support paying with PayPal, not with credit cards.\r\n   * This applies only to single payments (via PayPalPaymentViewController).\r\n   * Future payments (via PayPalFuturePaymentViewController) always use PayPal.\r\n   * Defaults to true\r\n   */\r\n  acceptCreditCards?: boolean;\r\n  /**\r\n   * For single payments, options for the shipping address.\r\n   * - 0 - PayPalShippingAddressOptionNone: no shipping address applies.\r\n   * - 1 - PayPalShippingAddressOptionProvided: shipping address will be provided by your app,\r\n   *   in the shippingAddress property of PayPalPayment.\r\n   * - 2 - PayPalShippingAddressOptionPayPal: user will choose from shipping addresses on file\r\n   *   for their PayPal account.\r\n   * - 3 - PayPalShippingAddressOptionBoth: user will choose from the shipping address provided by your app,\r\n   *   in the shippingAddress property of PayPalPayment, plus the shipping addresses on file for the user's PayPal account.\r\n   * Defaults to 0 (PayPalShippingAddressOptionNone).\r\n   */\r\n  payPalShippingAddressOption?: number;\r\n  /**\r\n   * If set to YES, then if the user pays via their PayPal account,\r\n   * the SDK will remember the user's PayPal username or phone number;\r\n   * if the user pays via their credit card, then the SDK will remember\r\n   * the PayPal Vault token representing the user's credit card.\r\n   *\r\n   * If set to NO, then any previously-remembered username, phone number, or\r\n   * credit card token will be erased, and subsequent payment information will\r\n   * not be remembered.\r\n   *\r\n   * Defaults to YES.\r\n   */\r\n  rememberUser?: boolean;\r\n  /**\r\n   * If not set, or if set to nil, defaults to the device's current language setting.\r\n   *\r\n   * Can be specified as a language code (\"en\", \"fr\", \"zh-Hans\", etc.) or as a locale (\"en_AU\", \"fr_FR\", \"zh-Hant_HK\", etc.).\r\n   * If the library does not contain localized strings for a specified locale, then will fall back to the language. E.g., \"es_CO\" -> \"es\".\r\n   * If the library does not contain localized strings for a specified language, then will fall back to American English.\r\n   *\r\n   * If you specify only a language code, and that code matches the device's currently preferred language,\r\n   * then the library will attempt to use the device's current region as well.\r\n   * E.g., specifying \"en\" on a device set to \"English\" and \"United Kingdom\" will result in \"en_GB\".\r\n   */\r\n  languageOrLocale?: string;\r\n  /**\r\n   * Normally, the SDK blurs the screen when the app is backgrounded,\r\n   * to obscure credit card or PayPal account details in the iOS-saved screenshot.\r\n   * If your app already does its own blurring upon backgrounding, you might choose to disable this.\r\n   * Defaults to NO.\r\n   */\r\n  disableBlurWhenBackgrounding?: boolean;\r\n  /**\r\n   * If you will present the SDK's view controller within a popover, then set this property to YES.\r\n   * Defaults to NO. (iOS only)\r\n   */\r\n  presentingInPopover?: boolean;\r\n  /**\r\n   * Sandbox credentials can be difficult to type on a mobile device. Setting this flag to YES will\r\n   * cause the sandboxUserPassword and sandboxUserPin to always be pre-populated into login fields.\r\n   */\r\n  forceDefaultsInSandbox?: boolean;\r\n  /**\r\n   * Password to use for sandbox if 'forceDefaultsInSandbox' is set.\r\n   */\r\n  sandboxUserPassword?: string;\r\n  /**\r\n   * PIN to use for sandbox if 'forceDefaultsInSandbox' is set.\r\n   */\r\n  sandboxUserPin?: string;\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  [key: string]: any;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport class PayPalConfiguration implements PayPalConfigurationOptions {\r\n  /**\r\n   * You use a PayPalConfiguration object to configure many aspects of how the SDK behaves.\r\n   * see defaults for options available\r\n   */\r\n  constructor(options?: PayPalConfigurationOptions) {\r\n\r\n    let defaults: PayPalConfigurationOptions = {\r\n      defaultUserEmail: null,\r\n      defaultUserPhoneCountryCode: null,\r\n      defaultUserPhoneNumber: null,\r\n      merchantName: null,\r\n      merchantPrivacyPolicyURL: null,\r\n      merchantUserAgreementURL: null,\r\n      acceptCreditCards: true,\r\n      payPalShippingAddressOption: 0,\r\n      rememberUser: true,\r\n      languageOrLocale: null,\r\n      disableBlurWhenBackgrounding: false,\r\n      presentingInPopover: false,\r\n      forceDefaultsInSandbox: false,\r\n      sandboxUserPassword: null,\r\n      sandboxUserPin: null\r\n    };\r\n\r\n    if (options && typeof options === 'object') {\r\n      for (let i in options) {\r\n        if (defaults.hasOwnProperty(i)) {\r\n          defaults[i] = options[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    return defaults;\r\n  }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class PayPalShippingAddress {\r\n  /**\r\n   * See the documentation of the individual properties for more detail.\r\n   * @param {String} recipientName: Name of the recipient at this address. 50 characters max.\r\n   * @param {String} line1: Line 1 of the address (e.g., Number, street, etc). 100 characters max.\r\n   * @param {String} line2: Line 2 of the address (e.g., Suite, apt #, etc). 100 characters max. Optional.\r\n   * @param {String} city: City name. 50 characters max.\r\n   * @param {String} state: 2-letter code for US states, and the equivalent for other countries. 100 characters max. Required in certain countries.\r\n   * @param {String} postalCode: ZIP code or equivalent is usually required for countries that have them. 20 characters max. Required in certain countries.\r\n   * @param {String} countryCode: 2-letter country code. 2 characters max.\r\n   */\r\n  constructor(recipientName: string, line1: string, line2: string, city: string, state: string, postalCode: string, countryCode: string) {\r\n    this.recipientName = recipientName;\r\n    this.line1 = line1;\r\n    this.line2 = line2;\r\n    this.city = city;\r\n    this.state = state;\r\n    this.postalCode = postalCode;\r\n    this.countryCode = countryCode;\r\n  }\r\n  /**\r\n   * Name of the recipient at this address. 50 characters max.\r\n   */\r\n  recipientName: string;\r\n  /**\r\n   * Line 1 of the address (e.g., Number, street, etc). 100 characters max.\r\n   */\r\n  line1: string;\r\n  /**\r\n   * Line 2 of the address (e.g., Suite, apt #, etc). 100 characters max. Optional.\r\n   */\r\n  line2: string;\r\n  /**\r\n   * City name. 50 characters max.\r\n   */\r\n  city: string;\r\n  /**\r\n   * 2-letter code for US states, and the equivalent for other countries. 100 characters max. Required in certain countries.\r\n   */\r\n  state: string;\r\n  /**\r\n   * ZIP code or equivalent is usually required for countries that have them. 20 characters max. Required in certain countries.\r\n   */\r\n  postalCode: string;\r\n  /**\r\n   * 2-letter country code. 2 characters max.\r\n   */\r\n  countryCode: string;\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}