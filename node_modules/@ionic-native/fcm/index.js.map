{"version":3,"sources":["../../../src/@ionic-native/plugins/fcm/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAA,EAAQ,iBAAA,EAAmB,OAAA,EAAQ,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAkB7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCG;AASH,IAAa,GAAG;IAAS,uBAAiB;IAA1C;;IA0DA,CAAC;IAxDC;;;;OAIG;IAEH,sBAAQ,GAAR,cAA8B,MAAM,CAAC,CAAC,CAAC;IAEvC;;;;OAIG;IAIH,4BAAc,GAAd,cAAuC,MAAM,CAAC,CAAC,CAAC;IAEhD;;;;;;OAMG;IAEH,8BAAgB,GAAhB,UAAiB,KAAa,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEzD;;;;;;OAMG;IAEH,kCAAoB,GAApB,UAAqB,KAAa,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE7D;;;;OAIG;IAMH,4BAAc,GAAd,cAAiD,MAAM,CAAC,CAAC,CAAC;IAQ5D,UAAC;AAAD,CA1DA,AA0DC,CA1DwB,iBAAiB,GA0DzC;AANM,cAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,kBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAjDA;IADC,OAAO,EAAE;;;;mCAC6B;AAUvC;IAHC,OAAO,CAAC;QACP,UAAU,EAAE,IAAI;KACjB,CAAC;;;oCACgB,UAAU;yCAAoB;AAUhD;IADC,OAAO,EAAE;;;;2CAC+C;AAUzD;IADC,OAAO,EAAE;;;;+CACmD;AAY7D;IALC,OAAO,CAAC;QACP,UAAU,EAAE,IAAI;QAChB,YAAY,EAAE,CAAC;QACf,UAAU,EAAE,CAAC;KACd,CAAC;;;oCACgB,UAAU;yCAA8B;AAlD/C,GAAG;IARf,MAAM,CAAC;QACN,UAAU,EAAE,KAAK;QACjB,MAAM,EAAE,oBAAoB;QAC5B,SAAS,EAAE,WAAW;QACtB,IAAI,EAAE,kDAAkD;QACxD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;KAC9B,CAAC;GAEW,GAAG,CA0Df;SA1DY,GAAG","file":"index.js","sourceRoot":"","sourcesContent":["import { Plugin, IonicNativePlugin, Cordova } from '@ionic-native/core';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nexport interface NotificationData {\r\n\r\n  /**\r\n   * Determines whether the notification was pressed or not\r\n   */\r\n\r\n  wasTapped: boolean;\r\n\r\n  /**\r\n   * Notification data hash item\r\n   */\r\n\r\n  [name: string]: any;\r\n\r\n}\r\n\r\n/**\r\n * @name FCM\r\n * @description\r\n * Provides basic functionality for Firebase Cloud Messaging\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { FCM } from '@ionic-native/fcm';\r\n *\r\n * constructor(private fcm: FCM) {}\r\n *\r\n * ...\r\n *\r\n * fcm.subscribeToTopic('marketing');\r\n *\r\n * fcm.getToken().then(token=>{\r\n *   backend.registerToken(token);\r\n * })\r\n *\r\n * fcm.onNotification().subscribe(data=>{\r\n *   if(data.wasTapped){\r\n *     console.log(\"Received in background\");\r\n *   } else {\r\n *     console.log(\"Received in foreground\");\r\n *   };\r\n * })\r\n *\r\n * fcm.onTokenRefresh().subscribe(token=>{\r\n *   backend.registerToken(token);\r\n * })\r\n *\r\n * fcm.unsubscribeFromTopic('marketing');\r\n *\r\n * ```\r\n * @interfaces\r\n * NotificationData\r\n */\r\n@Plugin({\r\n  pluginName: 'FCM',\r\n  plugin: 'cordova-plugin-fcm',\r\n  pluginRef: 'FCMPlugin',\r\n  repo: 'https://github.com/fechanique/cordova-plugin-fcm',\r\n  platforms: ['Android', 'iOS']\r\n})\r\n\r\nexport class FCM extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Get's device's current registration id\r\n   *\r\n   * @returns {Promise<string>} Returns a Promise that resolves with the registration id token\r\n   */\r\n  @Cordova()\r\n  getToken(): Promise<string> { return; }\r\n\r\n  /**\r\n   * Event firing on the token refresh\r\n   *\r\n   * @returns {Observable<string>} Returns an Observable that notifies with the change of device's registration id\r\n   */\r\n  @Cordova({\r\n    observable: true\r\n  })\r\n  onTokenRefresh(): Observable<string> { return; }\r\n\r\n  /**\r\n   * Subscribes you to a [topic](https://firebase.google.com/docs/notifications/android/console-topics)\r\n   *\r\n   * @param {string} topic Topic to be subscribed to\r\n   *\r\n   * @returns {Promise<any>} Returns a promise resolving in result of subscribing to a topic\r\n   */\r\n  @Cordova()\r\n  subscribeToTopic(topic: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Unubscribes you from a [topic](https://firebase.google.com/docs/notifications/android/console-topics)\r\n   *\r\n   * @param {string} topic Topic to be unsubscribed from\r\n   *\r\n   * @returns {Promise<any>} Returns a promise resolving in result of unsubscribing from a topic\r\n   */\r\n  @Cordova()\r\n  unsubscribeFromTopic(topic: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Watch for incoming notifications\r\n   *\r\n   * @returns {Observable<any>} returns an object with data from the notification\r\n   */\r\n  @Cordova({\r\n    observable: true,\r\n    successIndex: 0,\r\n    errorIndex: 2\r\n  })\r\n  onNotification(): Observable<NotificationData> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}