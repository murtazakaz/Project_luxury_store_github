{"version":3,"sources":["../../../src/@ionic-native/plugins/email-composer/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,YAAA,EAAc,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AA+CtF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsDG;AASH,IAAa,aAAa;IAAS,iCAAiB;IAApD;;IA+EA,CAAC;IA7EC;;;;;OAKG;IAEH,mCAAW,GAAX,UAAY,GAAY;QACtB,MAAM,CAAC,IAAI,OAAO,CAAU,UAAC,OAAO,EAAE,MAAM;YAC1C,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,eAAa,CAAC,SAAS,EAAE,CAAC,WAAW,CAAC,GAAG,EAAE,UAAC,WAAoB;oBAC9D,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBAChB,OAAO,EAAE,CAAC;oBACZ,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,EAAE,CAAC;oBACX,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,eAAa,CAAC,SAAS,EAAE,CAAC,WAAW,CAAC,UAAC,WAAoB;oBACzD,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBAChB,OAAO,EAAE,CAAC;oBACZ,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,EAAE,CAAC;oBACX,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IAKH,yCAAiB,GAAjB,cAAwC,MAAM,CAAC,CAAC,CAAC;IAEjD;;;OAGG;IAKH,qCAAa,GAAb,cAAoC,MAAM,CAAC,CAAC,CAAC;IAE7C;;;;;OAKG;IAEH,gCAAQ,GAAR,UAAS,KAAa,EAAE,WAAmB,IAAU,CAAC;IAEtD;;;;;;OAMG;IAKH,4BAAI,GAAJ,UAAK,OAA6B,EAAE,KAAW,IAAkB,MAAM,CAAC,CAAC,CAAC;IAQ5E,oBAAC;AAAD,CA/EA,AA+EC,CA/EkC,iBAAiB,GA+EnD;AANM,wBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,4BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AArEA;IADC,YAAY,EAAE;;;;gDAqBd;AAUD;IAJC,OAAO,CAAC;QACP,YAAY,EAAE,CAAC;QACf,UAAU,EAAE,CAAC;KACd,CAAC;;;;sDAC+C;AAUjD;IAJC,OAAO,CAAC;QACP,YAAY,EAAE,CAAC;QACf,UAAU,EAAE,CAAC;KACd,CAAC;;;;kDAC2C;AAS7C;IADC,OAAO,EAAE;;;;6CAC4C;AAatD;IAJC,OAAO,CAAC;QACP,YAAY,EAAE,CAAC;QACf,UAAU,EAAE,CAAC;KACd,CAAC;;;;yCACwE;AAvE/D,aAAa;IARzB,MAAM,CAAC;QACN,UAAU,EAAE,eAAe;QAC3B,MAAM,EAAE,+BAA+B;QACvC,SAAS,EAAE,uBAAuB;QAClC,IAAI,EAAE,yDAAyD;QAC/D,SAAS,EAAE,CAAC,gBAAgB,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;KACtE,CAAC;GAEW,aAAa,CA+EzB;SA/EY,aAAa","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, CordovaCheck, IonicNativePlugin } from '@ionic-native/core';\r\n\r\nexport interface EmailComposerOptions {\r\n\r\n  /**\r\n   * App to send the email with\r\n   */\r\n  app?: string;\r\n\r\n  /**\r\n   * Email address(es) for To field\r\n   */\r\n  to?: string | Array<string>;\r\n\r\n  /**\r\n   * Email address(es) for CC field\r\n   */\r\n  cc?: string | Array<string>;\r\n\r\n  /**\r\n   * Email address(es) for BCC field\r\n   */\r\n  bcc?: string | Array<string>;\r\n\r\n  /**\r\n   * File paths or base64 data streams\r\n   */\r\n  attachments?: string[];\r\n\r\n  /**\r\n   * Subject of the email\r\n   */\r\n  subject?: string;\r\n\r\n  /**\r\n   * Email body (for HTML, set isHtml to true)\r\n   */\r\n  body?: string;\r\n\r\n  /**\r\n   * Indicates if the body is HTML or plain text\r\n   */\r\n  isHtml?: boolean;\r\n\r\n}\r\n\r\n\r\n/**\r\n * @name Email Composer\r\n * @description\r\n *\r\n * Requires Cordova plugin: cordova-plugin-email-composer. For more info, please see the [Email Composer plugin docs](https://github.com/hypery2k/cordova-email-plugin).\r\n *\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { EmailComposer } from '@ionic-native/email-composer';\r\n *\r\n * constructor(private emailComposer: EmailComposer) { }\r\n *\r\n * ...\r\n *\r\n *\r\n * this.emailComposer.isAvailable().then((available: boolean) =>{\r\n *  if(available) {\r\n *    //Now we know we can send\r\n *  }\r\n * });\r\n *\r\n * let email = {\r\n *   to: 'max@mustermann.de',\r\n *   cc: 'erika@mustermann.de',\r\n *   bcc: ['john@doe.com', 'jane@doe.com'],\r\n *   attachments: [\r\n *     'file://img/logo.png',\r\n *     'res://icon.png',\r\n *     'base64:icon.png//iVBORw0KGgoAAAANSUhEUg...',\r\n *     'file://README.pdf'\r\n *   ],\r\n *   subject: 'Cordova Icons',\r\n *   body: 'How are you? Nice greetings from Leipzig',\r\n *   isHtml: true\r\n * };\r\n *\r\n * // Send a text message using default options\r\n * this.emailComposer.open(email);\r\n * ```\r\n *\r\n * You can also assign aliases to email apps\r\n * ```ts\r\n * // add alias\r\n * this.email.addAlias('gmail', 'com.google.android.gm');\r\n *\r\n * // then use alias when sending email\r\n * this.email.open({\r\n *   app: 'gmail',\r\n *   ...\r\n * });\r\n * ```\r\n * @interfaces\r\n * EmailComposerOptions\r\n */\r\n@Plugin({\r\n  pluginName: 'EmailComposer',\r\n  plugin: 'cordova-plugin-email-composer',\r\n  pluginRef: 'cordova.plugins.email',\r\n  repo: 'https://github.com/katzer/cordova-plugin-email-composer',\r\n  platforms: ['Amazon Fire OS', 'Android', 'Browser', 'iOS', 'Windows']\r\n})\r\n\r\nexport class EmailComposer extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Verifies if sending emails is supported on the device.\r\n   *\r\n   * @param [app] {string} App id or uri scheme.\r\n   * @returns {Promise<any>} Resolves if available, rejects if not available\r\n   */\r\n  @CordovaCheck()\r\n  isAvailable(app?: string): Promise<any> {\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      if (app) {\r\n        EmailComposer.getPlugin().isAvailable(app, (isAvailable: boolean) => {\r\n          if (isAvailable) {\r\n            resolve();\r\n          } else {\r\n            reject();\r\n          }\r\n        });\r\n      } else {\r\n        EmailComposer.getPlugin().isAvailable((isAvailable: boolean) => {\r\n          if (isAvailable) {\r\n            resolve();\r\n          } else {\r\n            reject();\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Request permission to access email accounts information\r\n   * @return {Promise<boolean>} returns a promise that resolves with a boolean that indicates if the permission was granted\r\n   */\r\n  @Cordova({\r\n    successIndex: 0,\r\n    errorIndex: 2\r\n  })\r\n  requestPermission(): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Checks if the app has a permission to access email accounts information\r\n   * @return {Promise<boolean>} returns a promise that resolves with a boolean that indicates if the permission was granted\r\n   */\r\n  @Cordova({\r\n    successIndex: 0,\r\n    errorIndex: 2\r\n  })\r\n  hasPermission(): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Adds a new mail app alias.\r\n   *\r\n   * @param alias {string} The alias name\r\n   * @param packageName {string} The package name\r\n   */\r\n  @Cordova()\r\n  addAlias(alias: string, packageName: string): void { }\r\n\r\n  /**\r\n   * Displays the email composer pre-filled with data.\r\n   *\r\n   * @param options {EmailComposerOptions} Email\r\n   * @param [scope] {any} Scope for the promise\r\n   * @returns {Promise<any>} Resolves promise when the EmailComposer has been opened\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 3\r\n  })\r\n  open(options: EmailComposerOptions, scope?: any): Promise<any> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}